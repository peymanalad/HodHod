workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "production" || $CI_COMMIT_BRANCH == "stage" || $CI_COMMIT_BRANCH == "develop" || $TEST == "true"
      when: always
    - when: never


variables:
  PROJECT_DEFAULT_DIRECTORY: /opt/$CI_PROJECT_NAMESPACE
  SERVER_USER: ouser
  SSH_PORT: 22
  STAGE_PORT: 8020
  PRODUCTION_PORT: 8021
  STAGE_SERVER_HOST: 192.168.59.118
  STAGE_APP_API_BASE_URL: https://stage.hodhod-api.stinas.ir
  STAGE_ENDPOINT: https://stage.hodhod-pwa.stinas.ir
  PRODUCTION_SERVER_HOST: 192.168.59.118
  PRODUCTION_APP_API_BASE_URL: https://hodhod-api.stinas.ir
  PRODUCTION_ENDPOINT: https://hodhod-pwa.stinas.ir
  SSH_COMMAND: ssh -o StrictHostKeyChecking=no -p $SSH_PORT -i deploy-key.pem $SERVER_USER@$SERVER_HOST
  SCP_COMMAND: scp -P $SSH_PORT -o StrictHostKeyChecking=no -i deploy-key.pem

stages:
  - build
  - db_migrate
  - deploy

build_and_push_image:
  stage: build
  tags:
    - builder
  before_script:
    - echo "$HARBOR_PASSWORD" | docker login --password-stdin --username "$HARBOR_USER" -- "$HARBOR_REGISTRY"
  script:
    - docker build -t $HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_IID -f ./src/HodHod.Web.Host/Dockerfile .
    - docker push $HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_IID
  rules:
    - if: $CI_COMMIT_BRANCH == "production" || $CI_COMMIT_BRANCH == "stage" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - if: $TEST == "true"
      when: manual

build_and_push_migrator_image:
  stage: build
  tags:
    - builder
  before_script:
    - echo "$HARBOR_PASSWORD" | docker login --password-stdin --username "$HARBOR_USER" -- "$HARBOR_REGISTRY"
  script:
    - docker build -t $HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME-migrator:$CI_PIPELINE_IID -f ./src/HodHod.Migrator/Dockerfile .
    - docker push $HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME-migrator:$CI_PIPELINE_IID
  rules:
    - if: $CI_COMMIT_BRANCH == "production" || $CI_COMMIT_BRANCH == "stage" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - if: $TEST == "true"
      when: manual

.run_migrations:
  stage: db_migrate
  tags:
    - builder
  needs:
    - job: build_and_push_migrator_image
  variables:
    PROJECT_ENDPOINT_VARIABLES: ""
    FOLDER_NAME: ""
    SERVER_HOST: ""
    DEPLOY_ENV: ""
    APP_PORT: ""
    ENDPOINT: ""
    IMAGE_TAG_SUFFIX: ""
  before_script:
    - echo "$HARBOR_PASSWORD" | docker login --password-stdin --username "$HARBOR_USER" -- "$HARBOR_REGISTRY"
    - docker pull $HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME-migrator:$CI_PIPELINE_IID
    - cat $PROJECT_ENDPOINT_VARIABLES >> .env
    - echo "" >> .env
    - echo "DC_DEPLOY_ENV=$DEPLOY_ENV" >> .env
    - echo "DC_APP_PORT=$APP_PORT" >> .env
    - echo "" >> .env
    - echo "DC_IMAGE_TAG=$CI_PIPELINE_IID" >> .env
    - echo "DC_IMAGE_NAME=$HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME" >> .env
    - cat .env
    - cat $SSH_PRIVATE_KEY | awk '{gsub(/\\n/,"\n")}1' > deploy-key.pem
    - chmod 400 deploy-key.pem
  script:
    - $SSH_COMMAND "sudo mkdir -p $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME/backup_compose_file && sudo chown -R $SERVER_USER:$SERVER_USER $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME/backup_compose_file"
    - $SCP_COMMAND .env ./docker-compose.yml ./deployments/scripts/update.sh $SERVER_USER@$SERVER_HOST:$PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME
    - $SSH_COMMAND "
      echo "$HARBOR_PASSWORD" | docker login --password-stdin --username "$HARBOR_USER" -- "$HARBOR_REGISTRY" &&
      cd $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME &&

      if [ -f ".env" ]; then
        export $(grep -v '^#' .env | xargs)
      fi

      docker run --rm --network hodhod-backend-app-network --env-file .env ${DC_IMAGE_NAME}-migrator:${CI_PIPELINE_IID} "

.deploy_template:
  stage: deploy
  tags:
    - builder
  needs:
    - job: build_and_push_image
    - job: build_and_push_migrator_image
    - job: migrate_stage
      optional: true
  variables:
    PROJECT_ENDPOINT_VARIABLES: ""
    FOLDER_NAME: ""
    SERVER_HOST: ""
    DEPLOY_ENV: ""
    APP_PORT: ""
    ENDPOINT: ""
    IMAGE_TAG_SUFFIX: ""
  before_script:
    - echo "$HARBOR_PASSWORD" | docker login --password-stdin --username "$HARBOR_USER" -- "$HARBOR_REGISTRY"
    - docker pull $HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_IID
    - cat $PROJECT_ENDPOINT_VARIABLES >> .env
    - echo "" >> .env
    - echo "DC_DEPLOY_ENV=$DEPLOY_ENV" >> .env
    - echo "DC_APP_PORT=$APP_PORT" >> .env
    - echo "" >> .env
    - echo "DC_IMAGE_TAG=$CI_PIPELINE_IID" >> .env
    - echo "DC_IMAGE_NAME=$HARBOR_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME" >> .env
    - cat .env
    - cat $SSH_PRIVATE_KEY | awk '{gsub(/\\n/,"\n")}1' > deploy-key.pem
    - chmod 400 deploy-key.pem
  script:
    - $SSH_COMMAND "sudo mkdir -p $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME/backup_compose_file && sudo chown -R $SERVER_USER:$SERVER_USER $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME/backup_compose_file"
    - $SCP_COMMAND .env ./docker-compose.yml ./deployments/scripts/update.sh $SERVER_USER@$SERVER_HOST:$PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME
    - $SSH_COMMAND "
      echo "$HARBOR_PASSWORD" | docker login --password-stdin --username "$HARBOR_USER" -- "$HARBOR_REGISTRY" &&
      cd $PROJECT_DEFAULT_DIRECTORY/$FOLDER_NAME &&

      docker compose -f docker-compose.yml up -d "
#      ./update.sh $DEPLOY_ENV docker-compose.yml "
  environment:
    name: $DEPLOY_ENV
    url: $ENDPOINT

migrate_stage:
  extends: .run_migrations
  variables:
    PROJECT_ENDPOINT_VARIABLES: $STAGE_ENV_FILE
    FOLDER_NAME: $CI_PROJECT_NAME-stage
    SERVER_HOST: $STAGE_SERVER_HOST
    DEPLOY_ENV: stage
    APP_PORT: $STAGE_PORT
    ENDPOINT: $STAGE_ENDPOINT
  rules:
    - if: $CI_COMMIT_BRANCH == "stage" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - if: $TEST == "true"
      when: manual

deploy_to_stage:
  extends: .deploy_template
  variables:
    PROJECT_ENDPOINT_VARIABLES: $STAGE_ENV_FILE
    FOLDER_NAME: $CI_PROJECT_NAME-stage
    SERVER_HOST: $STAGE_SERVER_HOST
    DEPLOY_ENV: stage
    APP_PORT: $STAGE_PORT
    ENDPOINT: $STAGE_ENDPOINT
  rules:
    - if: $CI_COMMIT_BRANCH == "stage" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - if: $TEST == "true"
      when: manual

deploy_to_production:
  extends: .deploy_template
  variables:
    PROJECT_ENDPOINT_VARIABLES: $PRODUCTION_ENV_FILE
    FOLDER_NAME: $CI_PROJECT_NAME-production
    SERVER_HOST: $PRODUCTION_SERVER_HOST
    DEPLOY_ENV: production
    APP_PORT: $PRODUCTION_PORT
    ENDPOINT: $PRODUCTION_ENDPOINT
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      when: manual
    - if: $TEST == "true"
      when: manual
